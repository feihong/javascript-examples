import React from 'react'
import ReactDOM from 'react-dom'
import _ from 'lodash'
import {BaseComponent} from '../lib/helper'
import emojimeta from './emojimeta'


const shortnames = getUniqueShortnames() //emojione.shortnames.split('|')
// Number of items on each page:
const pageSize = 100
// Number of pages:
const pageCount = Math.ceil(shortnames.length / pageSize)


class EmojiBrowser extends BaseComponent {
  constructor(props) {
    super(props)
    this.state = {
      page: 0,
      selectedShortnames: []
    }
    this._bind('handleSelectChange', 'handleLeftClick', 'handleRightClick',
               'handleSvgChange')
  }
  componentDidMount() {
    // Handle left and right key presses.
    document.addEventListener('keypress', (evt) => {
      switch (evt.keyCode) {
        case 37:
          this.handleLeftClick()
          break
        case 39:
          this.handleRightClick()
          break
      }
    })
  }
  render() {
    return <div>
      <div>Number of unique emojis: {shortnames.length}</div>
      <select onChange={this.handleSelectChange} value={this.state.page}>
        {this.renderOptions()}
      </select>
      <div>
        <textarea style={{width: '100%'}} rows="2"
                  value={this.state.selectedShortnames.join('\n')} />
      </div>
      <div style={{marginTop: '10px'}}>
        <ArrowButton onClick={this.handleLeftClick}>◀</ArrowButton>
        {this.renderSvgs()}
        <ArrowButton onClick={this.handleRightClick}>▶</ArrowButton>
      </div>
    </div>
  }
  renderOptions() {
    let results = []

    for (let i=0; i < pageCount; i++) {
      let [start, end] = getPageRange(i)
      if (i < (pageCount-1)) {
        end = end - 1
      }
      results.push(<option key={i} value={i}>{start+1} - {end}</option>)
    }
    return results
  }
  renderSvgs() {
    return getShortnamesForPage(this.state.page).map((shortname) => {
      return <SVG key={shortname}
                  shortname={shortname}
                  onChange={this.handleSvgChange} />
    })
  }

  handleSelectChange(evt) {
    this.setState({page: parseInt(evt.target.value)})
  }
  handleLeftClick() {
    let page = this.state.page - 1
    if (page < 0) {
      page = 0
    }
    this.setState({page: page})
  }
  handleRightClick() {
    let page = this.state.page + 1
    if (page > (pageCount - 1)) {
      page = pageCount - 1
    }
    this.setState({page: page})
  }
  handleSvgChange(key, selected) {
    let ssn = this.state.selectedShortnames
    if (selected) {
      this.setState({selectedShortnames: _(ssn).push(key).value()})
    } else {
      this.setState({selectedShortnames: _(ssn).without(key).value()})
    }
  }
  componentDidUpdate() {
    console.log(this.state.selectedShortnames)
  }
}


class SVG extends BaseComponent {
  constructor(props) {
    super(props)
    this.state = {selected: false}
    let sn = this.props.shortname
    this.shortnameKey = sn.substring(1, sn.length-1)
    this._bind('handleClick')
  }
  render() {
    let shortname = this.props.shortname
    let item = emojimeta[this.shortnameKey]
    let title = `${item.name} (${item.category})`

    let style = {
      fontSize: '40px',
      border: `1px dashed ${this.state.selected ? 'gray': 'white'}`,
      backgroundColor: this.state.selected ? 'yellow' : 'white',
    }

    return <svg {...this.props}
                className="emojione"
                title={title}
                style={style}
                dangerouslySetInnerHTML={this.getSvgHtml()}
                onClick={this.handleClick} />
  }
  getSvgHtml() {
    let shortname = this.props.shortname
    // You have to use raw HTML here because JSX does not support namespaces.
    return {__html: `<use xlink:href=${this.shortnameToUrl(shortname)}></use>`}
  }
  shortnameToUrl(shortname) {
    let item = emojione.emojioneList[shortname]
    let unicode = item[item.length - 1]
    return emojione.imagePathSVGSprites + '#emoji-' + unicode
  }
  handleClick() {
    let newState = !this.state.selected
    this.setState({selected: newState})
    if (this.props.onChange) {
      this.props.onChange(this.shortnameKey, newState)
    }
  }
}


class ArrowButton extends BaseComponent {
  render() {
    let style = {
      border: '1px solid black',
      borderRadius: '4px',
      textAlign: 'center',
      padding: '5px 10px',
      margin: '0 10px'
    }
    return <button {...this.props} style={style}>
      {this.props.children}
    </button>
  }
}


function getUniqueShortnames() {
  return emojione.shortnames.split('|').filter((sn) => {
    let key = sn.substring(1, sn.length-1)
    return key in emojimeta
  })
}

function getPageRange(pageIndex) {
  let start = pageIndex * pageSize
  let end = (pageIndex + 1) * pageSize
  if (end > shortnames.length) {
    end = shortnames.length
  }
  return [start, end]
}

function getShortnamesForPage(pageIndex) {
  let [start, end] = getPageRange(pageIndex)
  return shortnames.slice(start, end)
}


ReactDOM.render(
  <EmojiBrowser />,
  document.getElementById('content')
)
